
every appointment should be associated with sha hash used as identifier

implement http-like condition get based on last-modified-date

server must check for session validity, session is only safe if the sessionid is not being hijacked

use custom https certificate for client-server communication

1.Abstract

The Classroom Appointment Protocol is an application-level protocol for classroom appointment systems. 
It is a protocol that can be used to

1.1 check for current classroom appointments for specific week/date

1.2 add/modify/delete classroom appointments

1.3 view personal appointment


2. Request & Response

All requests and responses are in JSON format and must implement the following schema. 

2.1 Client Side Request

All client side requests must include client version and sha hash associated with the request. 

count total user appointments:

example.com/api/appointment/count

view appointment:

example.com/api/appointment/view

add appointment:

example.com/api/appointment/add

modify appointment:

example.com/api/appointment/modify

delete appointment:

example.com/api/appointment/delete



client server communication example:
example 1:

user want to view appointment for a specific classroom and date,
url: example.com/api/appointment/view
post data:
data={

    "client_ver": 0.01,
    “classroom”: “A203”,
    “appointment-date”: “20141114”,
    “sessionid”: “28486bdfh4i9fdgjh”,
    “last-modified”: 1415958492    //unix epoch time


}
if the data is not modified since last-modified, then we 
return the user NOT MODIFIED, otherwise we return the 
entry according to the request
only generate data for classes that already has appointment
the class number(time) is [1-9A-D]
example 1 sample response:

{
    “status_code”: 200,
    “last-modified”: 1415958575,
    “response”: [{“class”: 1, “data”: “3A演算法實習課”},{“class”:5, “data”: “蘇俊儒”}]
}



example 2:

user want to view appointment list of self,
post data:
data={
   
   "client_ver": 0.01,
   "sessionid": "28486bdfh4i9fdgjh",
   "last-modified": 1415958492

}

example 2 sample response:

{
 
    "status_code":200,
    "last_modified":1415958492,
    "response":[["1","2014-12-02\tTuesday","A203","1~1","黃詩凱"," ","15137"],["2","2014-12-02\tTuesday","A203","2~2","黃詩凱"," ","15138"]]

}
response format:
[["number","date","class","time","name","professor","delete&edit number"], [...], ...]




example 3:

user want to login and then get the auth token,
post data:
data={
    "username":102502042,
    "password":OAO
}

example 3 sample response:

{
    "status_code":200,
    "response":102502042AsdfWdcF
}
response is the token that can be used to send request, then the backend will auth by this token.



server JSON response must include a status code when error occurs

status code:
    200 => success
    400 => error
    401 => wrong client version
